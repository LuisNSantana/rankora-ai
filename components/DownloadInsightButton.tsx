"use client";

import { jsPDF } from "jspdf";
import { Button } from "@/components/ui/button";
import { BusinessInsight } from "@/lib/insights-schema";
import { FileText } from "lucide-react";

export default function DownloadInsightButton({ insight }: { insight: BusinessInsight }) {
  const handleDownload = () => {
    const doc = new jsPDF({ unit: "pt", format: "a4" });
    // Header
    doc.setFillColor(34, 80, 200);
    doc.rect(0, 0, 595, 80, "F");
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(28);
    doc.text("RANKORA AI - BUSINESS INSIGHT", 40, 50);
    doc.setFontSize(12);
    doc.text(`Generated: ${new Date(insight.generated_at).toLocaleDateString()}`, 40, 70);

    // Main info
    doc.setFillColor(245, 247, 255);
    doc.setDrawColor(34, 80, 200);
    doc.roundedRect(30, 90, 535, 60, 8, 8, "FD");
    doc.setTextColor(34, 80, 200);
    doc.setFontSize(16);
    doc.text(`Type: ${insight.type || "N/A"}`, 50, 120);
    doc.setFontSize(12);
    if (insight.title) doc.text(`Title: ${insight.title}`, 50, 140);

    let y = 170;
    const pageHeight = 842;
    const marginBottom = 60;
    function checkPageBreak(extra = 0) {
      if (y + extra > pageHeight - marginBottom) {
        doc.addPage();
        y = 40;
      }
    }

    // Summary
    doc.setTextColor(34, 80, 200);
    doc.setFontSize(15);
    checkPageBreak(24);
    doc.text("Summary", 40, y);
    doc.setTextColor(60, 60, 60);
    doc.setFontSize(12);
    y += 18;
    const summarySplit = doc.splitTextToSize(insight.summary, 500);
    checkPageBreak(summarySplit.length * 14 + 6);
    doc.text(summarySplit, 50, y);
    y += summarySplit.length * 14 + 12;

    // Metrics
    if (insight.metrics && insight.metrics.length > 0) {
      doc.setTextColor(34, 80, 200);
      doc.setFontSize(15);
      checkPageBreak(24);
      doc.text("Key Metrics", 40, y);
      doc.setTextColor(60, 60, 60);
      doc.setFontSize(12);
      y += 18;
      insight.metrics.forEach((m) => {
        checkPageBreak(16);
        doc.text(`• ${m.name}: ${m.value}${m.unit ? ` ${m.unit}` : ""}${m.trend ? ` (${m.trend})` : ""}`, 50, y);
        y += 16;
      });
      y += 8;
    }

    // Recommendations
    if (insight.recommendations && insight.recommendations.length > 0) {
      doc.setTextColor(34, 80, 200);
      doc.setFontSize(15);
      checkPageBreak(24);
      doc.text("Recommendations", 40, y);
      doc.setTextColor(60, 60, 60);
      doc.setFontSize(12);
      y += 18;
      insight.recommendations.forEach((rec) => {
        checkPageBreak(16);
        doc.text(`• [${rec.priority?.toUpperCase() || "MEDIUM"}] ${rec.title} - ${rec.description}`, 50, y);
        y += 16;
      });
      y += 8;
    }

    // Visualizations (only text/table summaries)
    if (insight.visualizations && insight.visualizations.length > 0) {
      doc.setTextColor(34, 80, 200);
      doc.setFontSize(15);
      checkPageBreak(24);
      doc.text("Visualizations (Summary)", 40, y);
      doc.setTextColor(60, 60, 60);
      doc.setFontSize(12);
      y += 18;
      insight.visualizations.forEach((viz) => {
        if (viz.type === "text") {
          const split = doc.splitTextToSize(viz.data, 480);
          checkPageBreak(split.length * 14 + 2);
          doc.text(split, 50, y);
          y += split.length * 14 + 2;
        } else if (viz.type === "table" && Array.isArray(viz.data)) {
          checkPageBreak(16);
          doc.text(`• Table: ${viz.title || "Untitled"} (${viz.data.length} rows)`, 50, y);
          y += 16;
        } else {
          checkPageBreak(16);
          doc.text(`• ${viz.type.charAt(0).toUpperCase() + viz.type.slice(1)}: ${viz.title || "Untitled"}`, 50, y);
          y += 16;
        }
      });
      y += 8;
    }

    // Sources
    if (insight.sources && insight.sources.length > 0) {
      doc.setTextColor(34, 80, 200);
      doc.setFontSize(15);
      checkPageBreak(24);
      doc.text("Sources", 40, y);
      doc.setTextColor(60, 60, 60);
      doc.setFontSize(12);
      y += 18;
      insight.sources.slice(0, 10).forEach((src) => {
        checkPageBreak(16);
        doc.text(`• ${src}`, 50, y);
        y += 16;
      });
      y += 8;
    }

    // Footer
    doc.setTextColor(180, 180, 180);
    doc.setFontSize(10);
    doc.text("Generated by Rankora AI (Huminary Labs) | For support: information@huminarylabs.com", 40, 810);

    doc.save(`insight-report-${insight.type || "business"}.pdf`);
  };

  return (
    <Button onClick={handleDownload} variant="outline" size="sm" className="h-8 px-2">
      <FileText className="w-4 h-4 mr-1" /> PDF
    </Button>
  );
}
